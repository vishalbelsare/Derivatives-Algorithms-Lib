# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dal
else:
    import _dal

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dal.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        r"""value(self) -> PyObject *"""
        return _dal.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        r"""
        incr(self, n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _dal.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        r"""
        decr(self, n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _dal.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        r"""
        distance(self, x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _dal.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        r"""
        equal(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _dal.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        r"""copy(self) -> SwigPyIterator"""
        return _dal.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        r"""next(self) -> PyObject *"""
        return _dal.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        r"""__next__(self) -> PyObject *"""
        return _dal.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        r"""previous(self) -> PyObject *"""
        return _dal.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        r"""
        advance(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _dal.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        r"""
        __eq__(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _dal.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        r"""
        __ne__(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _dal.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        r"""
        __iadd__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _dal.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        r"""
        __isub__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _dal.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        r"""
        __add__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _dal.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        r"""
        __sub__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(self, x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _dal.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _dal:
_dal.SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(self) -> SwigPyIterator"""
        return _dal.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(self) -> bool"""
        return _dal.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(self) -> bool"""
        return _dal.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        r"""__len__(self) -> std::vector< double >::size_type"""
        return _dal.DoubleVector___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        r"""
        __getslice__(self, i, j) -> DoubleVector

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _dal.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _dal.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _dal.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _dal.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        r"""
        __getitem__(self, slice) -> DoubleVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _dal.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _dal.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        r"""pop(self) -> std::vector< double >::value_type"""
        return _dal.DoubleVector_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _dal.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _dal.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        r"""size(self) -> std::vector< double >::size_type"""
        return _dal.DoubleVector_size(self)

    def swap(self, v: "DoubleVector") -> "void":
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _dal.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        r"""begin(self) -> std::vector< double >::iterator"""
        return _dal.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        r"""end(self) -> std::vector< double >::iterator"""
        return _dal.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        r"""rbegin(self) -> std::vector< double >::reverse_iterator"""
        return _dal.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        r"""rend(self) -> std::vector< double >::reverse_iterator"""
        return _dal.DoubleVector_rend(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _dal.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        r"""get_allocator(self) -> std::vector< double >::allocator_type"""
        return _dal.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _dal.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        r"""
        erase(self, pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(self, first, last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _dal.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> DoubleVector
        __init__(self, other) -> DoubleVector

        Parameters
        ----------
        other: std::vector< double > const &

        __init__(self, size) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(self, size, value) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        _dal.DoubleVector_swiginit(self, _dal.new_DoubleVector(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _dal.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        r"""front(self) -> std::vector< double >::value_type const &"""
        return _dal.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        r"""back(self) -> std::vector< double >::value_type const &"""
        return _dal.DoubleVector_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _dal.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _dal.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(self, pos, x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _dal.DoubleVector_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _dal.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        r"""capacity(self) -> std::vector< double >::size_type"""
        return _dal.DoubleVector_capacity(self)
    __swig_destroy__ = _dal.delete_DoubleVector

# Register DoubleVector in _dal:
_dal.DoubleVector_swigregister(DoubleVector)

class Storable_(object):
    r"""Proxy of C++ Handle_< Storable_ > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> Storable_"""
        _dal.Storable__swiginit(self, _dal.new_Storable_())
    __swig_destroy__ = _dal.delete_Storable_

# Register Storable_ in _dal:
_dal.Storable__swigregister(Storable_)

class Date_(object):
    r"""Proxy of C++ Date_ class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, yyyy: "int", mm: "int", dd: "int"):
        r"""
        __init__(self, yyyy, mm, dd) -> Date_

        Parameters
        ----------
        yyyy: int
        mm: int
        dd: int

        """
        _dal.Date__swiginit(self, _dal.new_Date_(yyyy, mm, dd))

    def AddDays(self, days: "int") -> "Date_":
        r"""
        AddDays(self, days) -> Date_

        Parameters
        ----------
        days: int

        """
        return _dal.Date__AddDays(self, days)

    def __repr__(self) -> "std::string":
        r"""__repr__(self) -> std::string"""
        return _dal.Date____repr__(self)

    def __lt__(self, other: "Date_") -> "bool":
        r"""
        __lt__(self, other) -> bool

        Parameters
        ----------
        other: Date_ *

        """
        return _dal.Date____lt__(self, other)

    def __le__(self, other: "Date_") -> "bool":
        r"""
        __le__(self, other) -> bool

        Parameters
        ----------
        other: Date_ *

        """
        return _dal.Date____le__(self, other)

    def __gt__(self, other: "Date_") -> "bool":
        r"""
        __gt__(self, other) -> bool

        Parameters
        ----------
        other: Date_ *

        """
        return _dal.Date____gt__(self, other)

    def __ge__(self, other: "Date_") -> "bool":
        r"""
        __ge__(self, other) -> bool

        Parameters
        ----------
        other: Date_ *

        """
        return _dal.Date____ge__(self, other)

    def __eq__(self, other: "Date_") -> "bool":
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: Date_ *

        """
        return _dal.Date____eq__(self, other)

    def __sub__(self, other: "Date_") -> "int":
        r"""
        __sub__(self, other) -> int

        Parameters
        ----------
        other: Date_ *

        """
        return _dal.Date____sub__(self, other)
    __swig_destroy__ = _dal.delete_Date_

# Register Date_ in _dal:
_dal.Date__swigregister(Date_)


def Year(dt: "Date_") -> "short":
    r"""
    Year(dt) -> short

    Parameters
    ----------
    dt: Date_ const &

    """
    return _dal.Year(dt)

def Month(dt: "Date_") -> "short":
    r"""
    Month(dt) -> short

    Parameters
    ----------
    dt: Date_ const &

    """
    return _dal.Month(dt)

def Day(dt: "Date_") -> "short":
    r"""
    Day(dt) -> short

    Parameters
    ----------
    dt: Date_ const &

    """
    return _dal.Day(dt)
class DateVector(object):
    r"""Proxy of C++ std::vector< Date_ > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(self) -> SwigPyIterator"""
        return _dal.DateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(self) -> bool"""
        return _dal.DateVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(self) -> bool"""
        return _dal.DateVector___bool__(self)

    def __len__(self) -> "std::vector< Date_ >::size_type":
        r"""__len__(self) -> std::vector< Date_ >::size_type"""
        return _dal.DateVector___len__(self)

    def __getslice__(self, i: "std::vector< Date_ >::difference_type", j: "std::vector< Date_ >::difference_type") -> "std::vector< Date_,std::allocator< Date_ > > *":
        r"""
        __getslice__(self, i, j) -> DateVector

        Parameters
        ----------
        i: std::vector< Date_ >::difference_type
        j: std::vector< Date_ >::difference_type

        """
        return _dal.DateVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< Date_ >::difference_type
        j: std::vector< Date_ >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< Date_ >::difference_type
        j: std::vector< Date_ >::difference_type
        v: std::vector< Date_,std::allocator< Date_ > > const &

        """
        return _dal.DateVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Date_ >::difference_type", j: "std::vector< Date_ >::difference_type") -> "void":
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< Date_ >::difference_type
        j: std::vector< Date_ >::difference_type

        """
        return _dal.DateVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< Date_ >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _dal.DateVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Date_ >::value_type const &":
        r"""
        __getitem__(self, slice) -> DateVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> Date_

        Parameters
        ----------
        i: std::vector< Date_ >::difference_type

        """
        return _dal.DateVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< Date_,std::allocator< Date_ > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< Date_ >::difference_type
        x: std::vector< Date_ >::value_type const &

        """
        return _dal.DateVector___setitem__(self, *args)

    def pop(self) -> "std::vector< Date_ >::value_type":
        r"""pop(self) -> Date_"""
        return _dal.DateVector_pop(self)

    def append(self, x: "Date_") -> "void":
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< Date_ >::value_type const &

        """
        return _dal.DateVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _dal.DateVector_empty(self)

    def size(self) -> "std::vector< Date_ >::size_type":
        r"""size(self) -> std::vector< Date_ >::size_type"""
        return _dal.DateVector_size(self)

    def swap(self, v: "DateVector") -> "void":
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< Date_ > &

        """
        return _dal.DateVector_swap(self, v)

    def begin(self) -> "std::vector< Date_ >::iterator":
        r"""begin(self) -> std::vector< Date_ >::iterator"""
        return _dal.DateVector_begin(self)

    def end(self) -> "std::vector< Date_ >::iterator":
        r"""end(self) -> std::vector< Date_ >::iterator"""
        return _dal.DateVector_end(self)

    def rbegin(self) -> "std::vector< Date_ >::reverse_iterator":
        r"""rbegin(self) -> std::vector< Date_ >::reverse_iterator"""
        return _dal.DateVector_rbegin(self)

    def rend(self) -> "std::vector< Date_ >::reverse_iterator":
        r"""rend(self) -> std::vector< Date_ >::reverse_iterator"""
        return _dal.DateVector_rend(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _dal.DateVector_clear(self)

    def get_allocator(self) -> "std::vector< Date_ >::allocator_type":
        r"""get_allocator(self) -> std::vector< Date_ >::allocator_type"""
        return _dal.DateVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _dal.DateVector_pop_back(self)

    def erase(self, *args) -> "std::vector< Date_ >::iterator":
        r"""
        erase(self, pos) -> std::vector< Date_ >::iterator

        Parameters
        ----------
        pos: std::vector< Date_ >::iterator

        erase(self, first, last) -> std::vector< Date_ >::iterator

        Parameters
        ----------
        first: std::vector< Date_ >::iterator
        last: std::vector< Date_ >::iterator

        """
        return _dal.DateVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> DateVector
        __init__(self, other) -> DateVector

        Parameters
        ----------
        other: std::vector< Date_ > const &

        __init__(self, size) -> DateVector

        Parameters
        ----------
        size: std::vector< Date_ >::size_type

        __init__(self, size, value) -> DateVector

        Parameters
        ----------
        size: std::vector< Date_ >::size_type
        value: std::vector< Date_ >::value_type const &

        """
        _dal.DateVector_swiginit(self, _dal.new_DateVector(*args))

    def push_back(self, x: "Date_") -> "void":
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< Date_ >::value_type const &

        """
        return _dal.DateVector_push_back(self, x)

    def front(self) -> "std::vector< Date_ >::value_type const &":
        r"""front(self) -> Date_"""
        return _dal.DateVector_front(self)

    def back(self) -> "std::vector< Date_ >::value_type const &":
        r"""back(self) -> Date_"""
        return _dal.DateVector_back(self)

    def assign(self, n: "std::vector< Date_ >::size_type", x: "Date_") -> "void":
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< Date_ >::size_type
        x: std::vector< Date_ >::value_type const &

        """
        return _dal.DateVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< Date_ >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< Date_ >::size_type
        x: std::vector< Date_ >::value_type const &

        """
        return _dal.DateVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(self, pos, x) -> std::vector< Date_ >::iterator

        Parameters
        ----------
        pos: std::vector< Date_ >::iterator
        x: std::vector< Date_ >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< Date_ >::iterator
        n: std::vector< Date_ >::size_type
        x: std::vector< Date_ >::value_type const &

        """
        return _dal.DateVector_insert(self, *args)

    def reserve(self, n: "std::vector< Date_ >::size_type") -> "void":
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< Date_ >::size_type

        """
        return _dal.DateVector_reserve(self, n)

    def capacity(self) -> "std::vector< Date_ >::size_type":
        r"""capacity(self) -> std::vector< Date_ >::size_type"""
        return _dal.DateVector_capacity(self)
    __swig_destroy__ = _dal.delete_DateVector

# Register DateVector in _dal:
_dal.DateVector_swigregister(DateVector)

class String_(object):
    r"""Proxy of C++ String_ class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(self, src) -> String_

        Parameters
        ----------
        src: char const *

        __init__(self, src) -> String_

        Parameters
        ----------
        src: std::string const &

        """
        _dal.String__swiginit(self, _dal.new_String_(*args))

    def __repr__(self) -> "std::string":
        r"""__repr__(self) -> std::string"""
        return _dal.String____repr__(self)
    __swig_destroy__ = _dal.delete_String_

# Register String_ in _dal:
_dal.String__swigregister(String_)

class StrVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(self) -> SwigPyIterator"""
        return _dal.StrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(self) -> bool"""
        return _dal.StrVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(self) -> bool"""
        return _dal.StrVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        r"""__len__(self) -> std::vector< std::string >::size_type"""
        return _dal.StrVector___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        r"""
        __getslice__(self, i, j) -> StrVector

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _dal.StrVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _dal.StrVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _dal.StrVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _dal.StrVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        r"""
        __getitem__(self, slice) -> StrVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _dal.StrVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _dal.StrVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        r"""pop(self) -> std::vector< std::string >::value_type"""
        return _dal.StrVector_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _dal.StrVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _dal.StrVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        r"""size(self) -> std::vector< std::string >::size_type"""
        return _dal.StrVector_size(self)

    def swap(self, v: "StrVector") -> "void":
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _dal.StrVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        r"""begin(self) -> std::vector< std::string >::iterator"""
        return _dal.StrVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        r"""end(self) -> std::vector< std::string >::iterator"""
        return _dal.StrVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        r"""rbegin(self) -> std::vector< std::string >::reverse_iterator"""
        return _dal.StrVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        r"""rend(self) -> std::vector< std::string >::reverse_iterator"""
        return _dal.StrVector_rend(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _dal.StrVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        r"""get_allocator(self) -> std::vector< std::string >::allocator_type"""
        return _dal.StrVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _dal.StrVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        r"""
        erase(self, pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(self, first, last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _dal.StrVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> StrVector
        __init__(self, other) -> StrVector

        Parameters
        ----------
        other: std::vector< std::string > const &

        __init__(self, size) -> StrVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(self, size, value) -> StrVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        _dal.StrVector_swiginit(self, _dal.new_StrVector(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _dal.StrVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        r"""front(self) -> std::vector< std::string >::value_type const &"""
        return _dal.StrVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        r"""back(self) -> std::vector< std::string >::value_type const &"""
        return _dal.StrVector_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _dal.StrVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _dal.StrVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(self, pos, x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _dal.StrVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _dal.StrVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        r"""capacity(self) -> std::vector< std::string >::size_type"""
        return _dal.StrVector_capacity(self)
    __swig_destroy__ = _dal.delete_StrVector

# Register StrVector in _dal:
_dal.StrVector_swigregister(StrVector)

class Cell_(object):
    r"""Proxy of C++ Cell_ class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, b) -> Cell_

        Parameters
        ----------
        b: bool

        __init__(self, d) -> Cell_

        Parameters
        ----------
        d: double

        __init__(self, dt) -> Cell_

        Parameters
        ----------
        dt: Date_ const &

        __init__(self, s) -> Cell_

        Parameters
        ----------
        s: String_ const &

        __init__(self, s) -> Cell_

        Parameters
        ----------
        s: char const *

        """
        _dal.Cell__swiginit(self, _dal.new_Cell_(*args))
    __swig_destroy__ = _dal.delete_Cell_

# Register Cell_ in _dal:
_dal.Cell__swigregister(Cell_)

class CellVector(object):
    r"""Proxy of C++ std::vector< Cell_ > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(self) -> SwigPyIterator"""
        return _dal.CellVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(self) -> bool"""
        return _dal.CellVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(self) -> bool"""
        return _dal.CellVector___bool__(self)

    def __len__(self) -> "std::vector< Cell_ >::size_type":
        r"""__len__(self) -> std::vector< Cell_ >::size_type"""
        return _dal.CellVector___len__(self)

    def __getslice__(self, i: "std::vector< Cell_ >::difference_type", j: "std::vector< Cell_ >::difference_type") -> "std::vector< Cell_,std::allocator< Cell_ > > *":
        r"""
        __getslice__(self, i, j) -> CellVector

        Parameters
        ----------
        i: std::vector< Cell_ >::difference_type
        j: std::vector< Cell_ >::difference_type

        """
        return _dal.CellVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< Cell_ >::difference_type
        j: std::vector< Cell_ >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< Cell_ >::difference_type
        j: std::vector< Cell_ >::difference_type
        v: std::vector< Cell_,std::allocator< Cell_ > > const &

        """
        return _dal.CellVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Cell_ >::difference_type", j: "std::vector< Cell_ >::difference_type") -> "void":
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< Cell_ >::difference_type
        j: std::vector< Cell_ >::difference_type

        """
        return _dal.CellVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< Cell_ >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _dal.CellVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Cell_ >::value_type const &":
        r"""
        __getitem__(self, slice) -> CellVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> Cell_

        Parameters
        ----------
        i: std::vector< Cell_ >::difference_type

        """
        return _dal.CellVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< Cell_,std::allocator< Cell_ > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< Cell_ >::difference_type
        x: std::vector< Cell_ >::value_type const &

        """
        return _dal.CellVector___setitem__(self, *args)

    def pop(self) -> "std::vector< Cell_ >::value_type":
        r"""pop(self) -> Cell_"""
        return _dal.CellVector_pop(self)

    def append(self, x: "Cell_") -> "void":
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< Cell_ >::value_type const &

        """
        return _dal.CellVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _dal.CellVector_empty(self)

    def size(self) -> "std::vector< Cell_ >::size_type":
        r"""size(self) -> std::vector< Cell_ >::size_type"""
        return _dal.CellVector_size(self)

    def swap(self, v: "CellVector") -> "void":
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< Cell_ > &

        """
        return _dal.CellVector_swap(self, v)

    def begin(self) -> "std::vector< Cell_ >::iterator":
        r"""begin(self) -> std::vector< Cell_ >::iterator"""
        return _dal.CellVector_begin(self)

    def end(self) -> "std::vector< Cell_ >::iterator":
        r"""end(self) -> std::vector< Cell_ >::iterator"""
        return _dal.CellVector_end(self)

    def rbegin(self) -> "std::vector< Cell_ >::reverse_iterator":
        r"""rbegin(self) -> std::vector< Cell_ >::reverse_iterator"""
        return _dal.CellVector_rbegin(self)

    def rend(self) -> "std::vector< Cell_ >::reverse_iterator":
        r"""rend(self) -> std::vector< Cell_ >::reverse_iterator"""
        return _dal.CellVector_rend(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _dal.CellVector_clear(self)

    def get_allocator(self) -> "std::vector< Cell_ >::allocator_type":
        r"""get_allocator(self) -> std::vector< Cell_ >::allocator_type"""
        return _dal.CellVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _dal.CellVector_pop_back(self)

    def erase(self, *args) -> "std::vector< Cell_ >::iterator":
        r"""
        erase(self, pos) -> std::vector< Cell_ >::iterator

        Parameters
        ----------
        pos: std::vector< Cell_ >::iterator

        erase(self, first, last) -> std::vector< Cell_ >::iterator

        Parameters
        ----------
        first: std::vector< Cell_ >::iterator
        last: std::vector< Cell_ >::iterator

        """
        return _dal.CellVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> CellVector
        __init__(self, other) -> CellVector

        Parameters
        ----------
        other: std::vector< Cell_ > const &

        __init__(self, size) -> CellVector

        Parameters
        ----------
        size: std::vector< Cell_ >::size_type

        __init__(self, size, value) -> CellVector

        Parameters
        ----------
        size: std::vector< Cell_ >::size_type
        value: std::vector< Cell_ >::value_type const &

        """
        _dal.CellVector_swiginit(self, _dal.new_CellVector(*args))

    def push_back(self, x: "Cell_") -> "void":
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< Cell_ >::value_type const &

        """
        return _dal.CellVector_push_back(self, x)

    def front(self) -> "std::vector< Cell_ >::value_type const &":
        r"""front(self) -> Cell_"""
        return _dal.CellVector_front(self)

    def back(self) -> "std::vector< Cell_ >::value_type const &":
        r"""back(self) -> Cell_"""
        return _dal.CellVector_back(self)

    def assign(self, n: "std::vector< Cell_ >::size_type", x: "Cell_") -> "void":
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< Cell_ >::size_type
        x: std::vector< Cell_ >::value_type const &

        """
        return _dal.CellVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< Cell_ >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< Cell_ >::size_type
        x: std::vector< Cell_ >::value_type const &

        """
        return _dal.CellVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(self, pos, x) -> std::vector< Cell_ >::iterator

        Parameters
        ----------
        pos: std::vector< Cell_ >::iterator
        x: std::vector< Cell_ >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< Cell_ >::iterator
        n: std::vector< Cell_ >::size_type
        x: std::vector< Cell_ >::value_type const &

        """
        return _dal.CellVector_insert(self, *args)

    def reserve(self, n: "std::vector< Cell_ >::size_type") -> "void":
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< Cell_ >::size_type

        """
        return _dal.CellVector_reserve(self, n)

    def capacity(self) -> "std::vector< Cell_ >::size_type":
        r"""capacity(self) -> std::vector< Cell_ >::size_type"""
        return _dal.CellVector_capacity(self)
    __swig_destroy__ = _dal.delete_CellVector

# Register CellVector in _dal:
_dal.CellVector_swigregister(CellVector)


def EvaluationDate_Get() -> "Date_":
    r"""EvaluationDate_Get() -> Date_"""
    return _dal.EvaluationDate_Get()

def EvaluationDate_Set(d: "Date_") -> "void":
    r"""
    EvaluationDate_Set(d)

    Parameters
    ----------
    d: Date_ const &

    """
    return _dal.EvaluationDate_Set(d)
class DoubleMatrix_(object):
    r"""Proxy of C++ Matrix_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, row, col, val=double()) -> DoubleMatrix_

        Parameters
        ----------
        row: int
        col: int
        val: double

        """
        _dal.DoubleMatrix__swiginit(self, _dal.new_DoubleMatrix_(*args))

    def __call__(self, i: "int", j: "int") -> "double":
        r"""
        __call__(self, i, j) -> double

        Parameters
        ----------
        i: int
        j: int

        """
        return _dal.DoubleMatrix____call__(self, i, j)
    __swig_destroy__ = _dal.delete_DoubleMatrix_

# Register DoubleMatrix_ in _dal:
_dal.DoubleMatrix__swigregister(DoubleMatrix_)

class ScriptProductData_(object):
    r"""Proxy of C++ Handle_< ScriptProductData_ > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> ScriptProductData_"""
        _dal.ScriptProductData__swiginit(self, _dal.new_ScriptProductData_())
    __swig_destroy__ = _dal.delete_ScriptProductData_

# Register ScriptProductData_ in _dal:
_dal.ScriptProductData__swigregister(ScriptProductData_)


def Product_New(dates: "CellVector", events: "StrVector") -> "Handle_< ScriptProductData_ >":
    r"""
    Product_New(dates, events) -> ScriptProductData_

    Parameters
    ----------
    dates: std::vector< Cell_,std::allocator< Cell_ > > const &
    events: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _dal.Product_New(dates, events)

def Product_Debug(product: "ScriptProductData_") -> "std::string":
    r"""
    Product_Debug(product) -> std::string

    Parameters
    ----------
    product: Handle_< ScriptProductData_ > const &

    """
    return _dal.Product_Debug(product)
class ModelData_(object):
    r"""Proxy of C++ Handle_< ModelData_ > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> ModelData_"""
        _dal.ModelData__swiginit(self, _dal.new_ModelData_())
    __swig_destroy__ = _dal.delete_ModelData_

# Register ModelData_ in _dal:
_dal.ModelData__swigregister(ModelData_)


def BSModelData_New(spot: "double", vol: "double", rate: "double", div: "double") -> "Handle_< ModelData_ >":
    r"""
    BSModelData_New(spot, vol, rate, div) -> ModelData_

    Parameters
    ----------
    spot: double
    vol: double
    rate: double
    div: double

    """
    return _dal.BSModelData_New(spot, vol, rate, div)

def DupireModelData_New(spot: "double", rate: "double", repo: "double", spots: "DoubleVector", times: "DoubleVector", vols: "DoubleMatrix_") -> "Handle_< ModelData_ >":
    r"""
    DupireModelData_New(spot, rate, repo, spots, times, vols) -> ModelData_

    Parameters
    ----------
    spot: double
    rate: double
    repo: double
    spots: std::vector< double,std::allocator< double > > const &
    times: std::vector< double,std::allocator< double > > const &
    vols: Matrix_< double > const &

    """
    return _dal.DupireModelData_New(spot, rate, repo, spots, times, vols)
class Dictionary(object):
    r"""Proxy of C++ std::map< std::string,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(self) -> SwigPyIterator"""
        return _dal.Dictionary_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(self) -> bool"""
        return _dal.Dictionary___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(self) -> bool"""
        return _dal.Dictionary___bool__(self)

    def __len__(self) -> "std::map< std::string,double >::size_type":
        r"""__len__(self) -> std::map< std::string,double >::size_type"""
        return _dal.Dictionary___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::map< std::string,double >::key_type const &") -> "std::map< std::string,double >::mapped_type const &":
        r"""
        __getitem__(self, key) -> std::map< std::string,double >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::string,double >::key_type const &

        """
        return _dal.Dictionary___getitem__(self, key)

    def __delitem__(self, key: "std::map< std::string,double >::key_type const &") -> "void":
        r"""
        __delitem__(self, key)

        Parameters
        ----------
        key: std::map< std::string,double >::key_type const &

        """
        return _dal.Dictionary___delitem__(self, key)

    def has_key(self, key: "std::map< std::string,double >::key_type const &") -> "bool":
        r"""
        has_key(self, key) -> bool

        Parameters
        ----------
        key: std::map< std::string,double >::key_type const &

        """
        return _dal.Dictionary_has_key(self, key)

    def keys(self) -> "PyObject *":
        r"""keys(self) -> PyObject *"""
        return _dal.Dictionary_keys(self)

    def values(self) -> "PyObject *":
        r"""values(self) -> PyObject *"""
        return _dal.Dictionary_values(self)

    def items(self) -> "PyObject *":
        r"""items(self) -> PyObject *"""
        return _dal.Dictionary_items(self)

    def __contains__(self, key: "std::map< std::string,double >::key_type const &") -> "bool":
        r"""
        __contains__(self, key) -> bool

        Parameters
        ----------
        key: std::map< std::string,double >::key_type const &

        """
        return _dal.Dictionary___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        r"""key_iterator(self) -> SwigPyIterator"""
        return _dal.Dictionary_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        r"""value_iterator(self) -> SwigPyIterator"""
        return _dal.Dictionary_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(self, key)

        Parameters
        ----------
        key: std::map< std::string,double >::key_type const &

        __setitem__(self, key, x)

        Parameters
        ----------
        key: std::map< std::string,double >::key_type const &
        x: std::map< std::string,double >::mapped_type const &

        """
        return _dal.Dictionary___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        r"""asdict(self) -> PyObject *"""
        return _dal.Dictionary_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(self, other) -> Dictionary

        Parameters
        ----------
        other: std::less< std::string > const &

        __init__(self) -> Dictionary
        __init__(self, other) -> Dictionary

        Parameters
        ----------
        other: std::map< std::string,double > const &

        """
        _dal.Dictionary_swiginit(self, _dal.new_Dictionary(*args))

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _dal.Dictionary_empty(self)

    def size(self) -> "std::map< std::string,double >::size_type":
        r"""size(self) -> std::map< std::string,double >::size_type"""
        return _dal.Dictionary_size(self)

    def swap(self, v: "Dictionary") -> "void":
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::map< std::string,double > &

        """
        return _dal.Dictionary_swap(self, v)

    def begin(self) -> "std::map< std::string,double >::iterator":
        r"""begin(self) -> std::map< std::string,double >::iterator"""
        return _dal.Dictionary_begin(self)

    def end(self) -> "std::map< std::string,double >::iterator":
        r"""end(self) -> std::map< std::string,double >::iterator"""
        return _dal.Dictionary_end(self)

    def rbegin(self) -> "std::map< std::string,double >::reverse_iterator":
        r"""rbegin(self) -> std::map< std::string,double >::reverse_iterator"""
        return _dal.Dictionary_rbegin(self)

    def rend(self) -> "std::map< std::string,double >::reverse_iterator":
        r"""rend(self) -> std::map< std::string,double >::reverse_iterator"""
        return _dal.Dictionary_rend(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _dal.Dictionary_clear(self)

    def get_allocator(self) -> "std::map< std::string,double >::allocator_type":
        r"""get_allocator(self) -> std::map< std::string,double >::allocator_type"""
        return _dal.Dictionary_get_allocator(self)

    def count(self, x: "std::map< std::string,double >::key_type const &") -> "std::map< std::string,double >::size_type":
        r"""
        count(self, x) -> std::map< std::string,double >::size_type

        Parameters
        ----------
        x: std::map< std::string,double >::key_type const &

        """
        return _dal.Dictionary_count(self, x)

    def erase(self, *args) -> "void":
        r"""
        erase(self, x) -> std::map< std::string,double >::size_type

        Parameters
        ----------
        x: std::map< std::string,double >::key_type const &

        erase(self, position)

        Parameters
        ----------
        position: std::map< std::string,double >::iterator

        erase(self, first, last)

        Parameters
        ----------
        first: std::map< std::string,double >::iterator
        last: std::map< std::string,double >::iterator

        """
        return _dal.Dictionary_erase(self, *args)

    def find(self, x: "std::map< std::string,double >::key_type const &") -> "std::map< std::string,double >::iterator":
        r"""
        find(self, x) -> std::map< std::string,double >::iterator

        Parameters
        ----------
        x: std::map< std::string,double >::key_type const &

        """
        return _dal.Dictionary_find(self, x)

    def lower_bound(self, x: "std::map< std::string,double >::key_type const &") -> "std::map< std::string,double >::iterator":
        r"""
        lower_bound(self, x) -> std::map< std::string,double >::iterator

        Parameters
        ----------
        x: std::map< std::string,double >::key_type const &

        """
        return _dal.Dictionary_lower_bound(self, x)

    def upper_bound(self, x: "std::map< std::string,double >::key_type const &") -> "std::map< std::string,double >::iterator":
        r"""
        upper_bound(self, x) -> std::map< std::string,double >::iterator

        Parameters
        ----------
        x: std::map< std::string,double >::key_type const &

        """
        return _dal.Dictionary_upper_bound(self, x)
    __swig_destroy__ = _dal.delete_Dictionary

# Register Dictionary in _dal:
_dal.Dictionary_swigregister(Dictionary)


def MonteCarlo_Value(*args) -> "std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >":
    r"""
    MonteCarlo_Value(product, modelData, num_path, method="sobol", use_bb=False, enable_aad=False, smooth=0.01) -> Dictionary

    Parameters
    ----------
    product: Handle_< ScriptProductData_ > const &
    modelData: Handle_< ModelData_ > const &
    num_path: int
    method: std::string const &
    use_bb: bool
    enable_aad: bool
    smooth: double

    """
    return _dal.MonteCarlo_Value(*args)
class PseudoRSG_(object):
    r"""Proxy of C++ Handle_< PseudoRSG_ > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> PseudoRSG_"""
        _dal.PseudoRSG__swiginit(self, _dal.new_PseudoRSG_())
    __swig_destroy__ = _dal.delete_PseudoRSG_

# Register PseudoRSG_ in _dal:
_dal.PseudoRSG__swigregister(PseudoRSG_)

class SobolRSG_(object):
    r"""Proxy of C++ Handle_< SobolRSG_ > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> SobolRSG_"""
        _dal.SobolRSG__swiginit(self, _dal.new_SobolRSG_())
    __swig_destroy__ = _dal.delete_SobolRSG_

# Register SobolRSG_ in _dal:
_dal.SobolRSG__swigregister(SobolRSG_)


def PseudoRSG_New(seed: "int", ndim: "int"=1) -> "Handle_< PseudoRSG_ >":
    r"""
    PseudoRSG_New(seed, ndim=1) -> PseudoRSG_

    Parameters
    ----------
    seed: int
    ndim: int

    """
    return _dal.PseudoRSG_New(seed, ndim)

def PseudoRSG_Get_Uniform(rsg: "PseudoRSG_", num_path: "int") -> "Matrix_< double >":
    r"""
    PseudoRSG_Get_Uniform(rsg, num_path) -> DoubleMatrix_

    Parameters
    ----------
    rsg: Handle_< PseudoRSG_ > const &
    num_path: int

    """
    return _dal.PseudoRSG_Get_Uniform(rsg, num_path)

def PseudoRSG_Get_Normal(rsg: "PseudoRSG_", num_path: "int") -> "Matrix_< double >":
    r"""
    PseudoRSG_Get_Normal(rsg, num_path) -> DoubleMatrix_

    Parameters
    ----------
    rsg: Handle_< PseudoRSG_ > const &
    num_path: int

    """
    return _dal.PseudoRSG_Get_Normal(rsg, num_path)

def SobolRSG_New(i_path: "int", ndim: "int"=1) -> "Handle_< SobolRSG_ >":
    r"""
    SobolRSG_New(i_path, ndim=1) -> SobolRSG_

    Parameters
    ----------
    i_path: int
    ndim: int

    """
    return _dal.SobolRSG_New(i_path, ndim)

def SobolRSG_Get_Uniform(rsg: "SobolRSG_", num_path: "int") -> "Matrix_< double >":
    r"""
    SobolRSG_Get_Uniform(rsg, num_path) -> DoubleMatrix_

    Parameters
    ----------
    rsg: Handle_< SobolRSG_ > const &
    num_path: int

    """
    return _dal.SobolRSG_Get_Uniform(rsg, num_path)

def SobolRSG_Get_Normal(rsg: "SobolRSG_", num_path: "int") -> "Matrix_< double >":
    r"""
    SobolRSG_Get_Normal(rsg, num_path) -> DoubleMatrix_

    Parameters
    ----------
    rsg: Handle_< SobolRSG_ > const &
    num_path: int

    """
    return _dal.SobolRSG_Get_Normal(rsg, num_path)


