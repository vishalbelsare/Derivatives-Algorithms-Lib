# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dal
else:
    import _dal

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dal.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _dal.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _dal.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _dal.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _dal.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _dal.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _dal.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _dal.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _dal.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _dal.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _dal.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _dal.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _dal.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _dal.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _dal.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _dal.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _dal.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _dal:
_dal.SwigPyIterator_swigregister(SwigPyIterator)

class Date_(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, yyyy: "int", mm: "int", dd: "int"):
        _dal.Date__swiginit(self, _dal.new_Date_(yyyy, mm, dd))

    def __repr__(self) -> "std::string":
        return _dal.Date____repr__(self)
    __swig_destroy__ = _dal.delete_Date_

# Register Date_ in _dal:
_dal.Date__swigregister(Date_)


def Year(dt: "Date_") -> "short":
    return _dal.Year(dt)

def Month(dt: "Date_") -> "short":
    return _dal.Month(dt)

def Day(dt: "Date_") -> "short":
    return _dal.Day(dt)
class DateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _dal.DateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _dal.DateVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _dal.DateVector___bool__(self)

    def __len__(self) -> "std::vector< Date_ >::size_type":
        return _dal.DateVector___len__(self)

    def __getslice__(self, i: "std::vector< Date_ >::difference_type", j: "std::vector< Date_ >::difference_type") -> "std::vector< Date_,std::allocator< Date_ > > *":
        return _dal.DateVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _dal.DateVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Date_ >::difference_type", j: "std::vector< Date_ >::difference_type") -> "void":
        return _dal.DateVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _dal.DateVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Date_ >::value_type const &":
        return _dal.DateVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _dal.DateVector___setitem__(self, *args)

    def pop(self) -> "std::vector< Date_ >::value_type":
        return _dal.DateVector_pop(self)

    def append(self, x: "Date_") -> "void":
        return _dal.DateVector_append(self, x)

    def empty(self) -> "bool":
        return _dal.DateVector_empty(self)

    def size(self) -> "std::vector< Date_ >::size_type":
        return _dal.DateVector_size(self)

    def swap(self, v: "DateVector") -> "void":
        return _dal.DateVector_swap(self, v)

    def begin(self) -> "std::vector< Date_ >::iterator":
        return _dal.DateVector_begin(self)

    def end(self) -> "std::vector< Date_ >::iterator":
        return _dal.DateVector_end(self)

    def rbegin(self) -> "std::vector< Date_ >::reverse_iterator":
        return _dal.DateVector_rbegin(self)

    def rend(self) -> "std::vector< Date_ >::reverse_iterator":
        return _dal.DateVector_rend(self)

    def clear(self) -> "void":
        return _dal.DateVector_clear(self)

    def get_allocator(self) -> "std::vector< Date_ >::allocator_type":
        return _dal.DateVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _dal.DateVector_pop_back(self)

    def erase(self, *args) -> "std::vector< Date_ >::iterator":
        return _dal.DateVector_erase(self, *args)

    def __init__(self, *args):
        _dal.DateVector_swiginit(self, _dal.new_DateVector(*args))

    def push_back(self, x: "Date_") -> "void":
        return _dal.DateVector_push_back(self, x)

    def front(self) -> "std::vector< Date_ >::value_type const &":
        return _dal.DateVector_front(self)

    def back(self) -> "std::vector< Date_ >::value_type const &":
        return _dal.DateVector_back(self)

    def assign(self, n: "std::vector< Date_ >::size_type", x: "Date_") -> "void":
        return _dal.DateVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _dal.DateVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _dal.DateVector_insert(self, *args)

    def reserve(self, n: "std::vector< Date_ >::size_type") -> "void":
        return _dal.DateVector_reserve(self, n)

    def capacity(self) -> "std::vector< Date_ >::size_type":
        return _dal.DateVector_capacity(self)
    __swig_destroy__ = _dal.delete_DateVector

# Register DateVector in _dal:
_dal.DateVector_swigregister(DateVector)

class String_(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _dal.String__swiginit(self, _dal.new_String_(*args))

    def __repr__(self) -> "std::string":
        return _dal.String____repr__(self)
    __swig_destroy__ = _dal.delete_String_

# Register String_ in _dal:
_dal.String__swigregister(String_)

class StrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _dal.StrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _dal.StrVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _dal.StrVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _dal.StrVector___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _dal.StrVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _dal.StrVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _dal.StrVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _dal.StrVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _dal.StrVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _dal.StrVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _dal.StrVector_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _dal.StrVector_append(self, x)

    def empty(self) -> "bool":
        return _dal.StrVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _dal.StrVector_size(self)

    def swap(self, v: "StrVector") -> "void":
        return _dal.StrVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _dal.StrVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _dal.StrVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _dal.StrVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _dal.StrVector_rend(self)

    def clear(self) -> "void":
        return _dal.StrVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _dal.StrVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _dal.StrVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _dal.StrVector_erase(self, *args)

    def __init__(self, *args):
        _dal.StrVector_swiginit(self, _dal.new_StrVector(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _dal.StrVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _dal.StrVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _dal.StrVector_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _dal.StrVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _dal.StrVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _dal.StrVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _dal.StrVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _dal.StrVector_capacity(self)
    __swig_destroy__ = _dal.delete_StrVector

# Register StrVector in _dal:
_dal.StrVector_swigregister(StrVector)

class DoubleMatrix_(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, i: "int", j: "int") -> "double":
        return _dal.DoubleMatrix____call__(self, i, j)

    def __init__(self):
        _dal.DoubleMatrix__swiginit(self, _dal.new_DoubleMatrix_())
    __swig_destroy__ = _dal.delete_DoubleMatrix_

# Register DoubleMatrix_ in _dal:
_dal.DoubleMatrix__swigregister(DoubleMatrix_)

class ScriptProduct_(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _dal.ScriptProduct__swiginit(self, _dal.new_ScriptProduct_())
    __swig_destroy__ = _dal.delete_ScriptProduct_

# Register ScriptProduct_ in _dal:
_dal.ScriptProduct__swigregister(ScriptProduct_)


def Product_New(dates: "DateVector", events: "StrVector") -> "Handle_< ScriptProduct_ >":
    return _dal.Product_New(dates, events)

def Product_Debug(product: "ScriptProduct_") -> "std::string":
    return _dal.Product_Debug(product)
class PseudoRSG_(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _dal.PseudoRSG__swiginit(self, _dal.new_PseudoRSG_())
    __swig_destroy__ = _dal.delete_PseudoRSG_

# Register PseudoRSG_ in _dal:
_dal.PseudoRSG__swigregister(PseudoRSG_)

class SobolRSG_(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _dal.SobolRSG__swiginit(self, _dal.new_SobolRSG_())
    __swig_destroy__ = _dal.delete_SobolRSG_

# Register SobolRSG_ in _dal:
_dal.SobolRSG__swigregister(SobolRSG_)


def PseudoRSG_New(seed: "int", ndim: "int"=1) -> "Handle_< PseudoRSG_ >":
    return _dal.PseudoRSG_New(seed, ndim)

def PseudoRSG_Get_Uniform(rsg: "PseudoRSG_", num_path: "int") -> "Matrix_< double >":
    return _dal.PseudoRSG_Get_Uniform(rsg, num_path)

def PseudoRSG_Get_Normal(rsg: "PseudoRSG_", num_path: "int") -> "Matrix_< double >":
    return _dal.PseudoRSG_Get_Normal(rsg, num_path)

def SobolRSG_New(i_path: "int", ndim: "int"=1) -> "Handle_< SobolRSG_ >":
    return _dal.SobolRSG_New(i_path, ndim)

def SobolRSG_Get_Uniform(rsg: "SobolRSG_", num_path: "int") -> "Matrix_< double >":
    return _dal.SobolRSG_Get_Uniform(rsg, num_path)

def SobolRSG_Get_Normal(rsg: "SobolRSG_", num_path: "int") -> "Matrix_< double >":
    return _dal.SobolRSG_Get_Normal(rsg, num_path)


