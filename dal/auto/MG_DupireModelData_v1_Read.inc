// This file is auto-generated by machinist. Please don't modify it manually.
namespace DupireModelData_v1 {
    struct Reader_ : Archive::Reader_ {
        String_ name_;
        double spot_;
        double rate_;
        double repo_;
        Vector_<double> spots_;
        Vector_<double> times_;
        Matrix_<double> vols_;
        Reader_(const Archive::View_& src, Archive::Built_& share) {
            using namespace Archive::Utils;
            NOTE("Reading DupireModelData_v1 from store");
            assert(src.Type() == "DupireModelData_v1");
            GetOptional(src, "name", &name_, std::mem_fn(&Archive::View_::AsString));
            Get(src, "spot", &spot_, std::mem_fn(&Archive::View_::AsDouble));
            Get(src, "rate", &rate_, std::mem_fn(&Archive::View_::AsDouble));
            Get(src, "repo", &repo_, std::mem_fn(&Archive::View_::AsDouble));
            Get(src, "spots", &spots_, std::mem_fn(&Archive::View_::AsDoubleVector));
            Get(src, "times", &times_, std::mem_fn(&Archive::View_::AsDoubleVector));
            Get(src, "vols", &vols_, std::mem_fn(&Archive::View_::AsDoubleMatrix));
        }
        DupireModelData_* Build() const
        {
         return new DupireModelData_(name_, spot_, rate_, repo_, spots_, times_, vols_);
        }
        DupireModelData_* Build(const Archive::View_& src, Archive::Built_& share) const {
            return Reader_(src, share).Build();
        }

        // constructor-through-registry (safer than default constructor)
        Reader_(void (*register_func)(const String_&, const Archive::Reader_*)) {
            register_func("DupireModelData_v1", this);
        }
    };
    static Reader_ TheData(Archive::Register);
}
	