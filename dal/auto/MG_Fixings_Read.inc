// This file is auto-generated by machinist. Please don't modify it manually.
namespace Fixings {
    struct Reader_ : Archive::Reader_ {
        String_ name_;
        Vector_<double> fixings_;
        Vector_<DateTime_> fixing_times_;
        Reader_(const Archive::View_& src, Archive::Built_& share) {
            using namespace Archive::Utils;
            NOTE("Reading Fixings from store");
            assert(src.Type() == "Fixings");
            GetOptional(src, "name", &name_, std::mem_fn(&Archive::View_::AsString));
            Get(src, "fixings", &fixings_, std::mem_fn(&Archive::View_::AsDoubleVector));
            Get(src, "fixing_times", &fixing_times_, std::mem_fn(&Archive::View_::AsDateTimeVector));
        }
        Storable_* Build() const;	// handwritten
        Storable_* Build(const Archive::View_& src, Archive::Built_& share) const {
            return Reader_(src, share).Build();
        }

        // constructor-through-registry (safer than default constructor)
        Reader_(void (*register_func)(const String_&, const Archive::Reader_*)) {
            register_func("Fixings", this);
        }
    };
    static Reader_ TheData(Archive::Register);
}
	