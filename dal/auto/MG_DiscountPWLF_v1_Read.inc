// This file is auto-generated by machinist. Please don't modify it manually.
namespace DiscountPWLF_v1 {
    struct Reader_ : Archive::Reader_ {
        String_ name_;
        Vector_<Date_> knotDates_;
        Vector_<double> leftVals_;
        Vector_<double> rightVals_;
        Handle_<DiscountCurve_> base_;
        Reader_(const Archive::View_& src, Archive::Built_& share) {
            using namespace Archive::Utils;
            NOTE("Reading DiscountPWLF_v1 from store");
            assert(src.Type() == "DiscountPWLF_v1");
            GetOptional(src, "name", &name_, std::mem_fn(&Archive::View_::AsString));
            Get(src, "knotDates", &knotDates_, std::mem_fn(&Archive::View_::AsDateVector));
            Get(src, "leftVals", &leftVals_, std::mem_fn(&Archive::View_::AsDoubleVector));
            Get(src, "rightVals", &rightVals_, std::mem_fn(&Archive::View_::AsDoubleVector));
            GetOptional(src, "base", &base_, Archive::Builder_<DiscountCurve_>(share, "base", "DiscountCurve"));
        }
        Storable_* Build() const;	// handwritten
        Storable_* Build(const Archive::View_& src, Archive::Built_& share) const {
            return Reader_(src, share).Build();
        }

        // constructor-through-registry (safer than default constructor)
        Reader_(void (*register_func)(const String_&, const Archive::Reader_*)) {
            register_func("DiscountPWLF_v1", this);
        }
    };
    static Reader_ TheData(Archive::Register);
}
	