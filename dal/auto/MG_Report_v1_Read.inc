// This file is auto-generated by machinist. Please don't modify it manually.
namespace Report_v1 {
    struct Reader_ : Archive::Reader_ {
        String_ name_;
        Vector_<String_> axis_names_;
        Vector_<int> sizes_;
        Vector_<double> vals_;
        Vector_<Vector_<String_>> header_labels_;
        Vector_<Matrix_<Cell_>> header_values_;
        Reader_(const Archive::View_& src, Archive::Built_& share) {
            using namespace Archive::Utils;
            NOTE("Reading Report_v1 from store");
            assert(src.Type() == "Report_v1");
            GetOptional(src, "name", &name_, std::mem_fn(&Archive::View_::AsString));
            Get(src, "axis_names", &axis_names_, std::mem_fn(&Archive::View_::AsStringVector));
            Get(src, "sizes", &sizes_, std::mem_fn(&Archive::View_::AsIntVector));
            Get(src, "vals", &vals_, std::mem_fn(&Archive::View_::AsDoubleVector));
            GetMultiple(src, "header_labels", &header_labels_, std::mem_fn(&Archive::View_::AsStringVector));
                        REQUIRE(!header_labels_.empty(), "Node 'header_labels' not found");
            GetMultiple(src, "header_values", &header_values_, std::mem_fn(&Archive::View_::AsCellMatrix));
                        REQUIRE(!header_values_.empty(), "Node 'header_values' not found");
        }
        Storable_* Build() const;	// handwritten
        Storable_* Build(const Archive::View_& src, Archive::Built_& share) const {
            return Reader_(src, share).Build();
        }

        // constructor-through-registry (safer than default constructor)
        Reader_(void (*register_func)(const String_&, const Archive::Reader_*)) {
            register_func("Report_v1", this);
        }
    };
    static Reader_ TheData(Archive::Register);
}
	